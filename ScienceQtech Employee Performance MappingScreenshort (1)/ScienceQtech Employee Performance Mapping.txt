-- 3. Fetch employee details and their department:
SELECT EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT
FROM emp_record_table;

-- 4. Fetch employee details along with EMP_RATING based on different conditions:
-- for less than two
SELECT EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
FROM emp_record_table
WHERE EMP_RATING < 2;

-- for greater than four
SELECT EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
FROM emp_record_table
WHERE EMP_RATING > 4;

-- for between two and four
SELECT EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING
FROM emp_record_table
WHERE EMP_RATING BETWEEN 2 AND 4;

-- 5. Concatenate FIRST_NAME and LAST_NAME of employees in the Finance department:
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS NAME
FROM emp_record_table
WHERE DEPT = 'Finance';

-- 6. List employees who have someone reporting to them:
SELECT e.*
FROM emp_record_table e
WHERE e.EMP_ID IN (SELECT DISTINCT MANAGER_ID FROM emp_record_table WHERE MANAGER_ID IS NOT NULL);

-- 7. List employees from healthcare and finance departments using UNION:	
SELECT *
FROM emp_record_table
WHERE DEPT = 'Healthcare'
UNION
SELECT *
FROM emp_record_table
WHERE DEPT = 'Finance';

-- 8. List employee details grouped by department along with max employee rating:
SELECT m.EMP_ID, m.FIRST_NAME, m.LAST_NAME, m.ROLE,m.EXP, m.DEPT, COUNT(e.EMP_ID) as "EMP_COUNT"
FROM employee.emp_record_table m
INNER JOIN employee.emp_record_table e
ON m.EMP_ID = e.MANAGER_ID
AND e.EMP_ID != e.MANAGER_ID
WHERE m.ROLE IN ("MANAGER", "PRESIDENT", "CEO")
GROUP BY m.EMP_ID, m.FIRST_NAME, m.LAST_NAME, m.ROLE, m.EXP, m.DEPT
ORDER BY m.EMP_ID;


-- 9. Calculate minimum and maximum salary for each role:
SELECT ROLE, MIN(SALARY) AS MIN_SALARY, MAX(SALARY) AS MAX_SALARY
FROM emp_record_table
GROUP BY ROLE;

-- 10. Assign ranks to employees based on experience:
SELECT EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, EXP,
       CASE
           WHEN EXP <= 2 THEN 'JUNIOR DATA SCIENTIST'
           WHEN EXP <= 5 THEN 'ASSOCIATE DATA SCIENTIST'
           WHEN EXP <= 10 THEN 'SENIOR DATA SCIENTIST'
           WHEN EXP <= 12 THEN 'LEAD DATA SCIENTIST'
           ELSE 'MANAGER'
       END AS EXPERIENCE_RANK
FROM emp_record_table;

-- 11. Create a view for employees in various countries with salary > 6000:
CREATE VIEW high_salary_employees AS 
SELECT *
FROM emp_record_table
WHERE SALARY > 6000;

-- 12.Nested query to find employees with experience > 10 years:
SELECT *
FROM emp_record_table
WHERE EXP > 10;

-- 13. Stored procedure to retrieve details of employees with experience > 3 years:
DELIMITER //
CREATE PROCEDURE GetEmployeesWithExperience()
BEGIN
    SELECT *
    FROM emp_record_table
    WHERE EXP > 3;
END //
DELIMITER ;

-- 14. Stored function to check job profile standards in the data science team: ERROR
DELIMITER //
CREATE FUNCTION CheckJobProfileStandard(experience INT) RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
    DECLARE job_profile VARCHAR(50);
    
    IF experience <= 2 THEN
        SET job_profile = 'JUNIOR DATA SCIENTIST';
    ELSEIF experience <= 5 THEN
        SET job_profile = 'ASSOCIATE DATA SCIENTIST';
    ELSEIF experience <= 10 THEN
        SET job_profile = 'SENIOR DATA SCIENTIST';
    ELSEIF experience <= 12 THEN
        SET job_profile = 'LEAD DATA SCIENTIST';
    ELSE
        SET job_profile = 'MANAGER';
    END IF;
    
    RETURN job_profile;
END //

DELIMITER ;

-- 15. Create an index for improving performance:
CREATE INDEX idx_firstname ON emp_record_table (FIRST_NAME(10));

-- 16. Query to calculate bonus based on ratings and salaries:
SELECT EMP_ID, SALARY, EMP_RATING, (0.05 * SALARY * EMP_RATING) AS BONUS
FROM emp_record_table;

-- 17. Query to calculate average salary distribution based on continent and country:
SELECT CONTINENT, COUNTRY, AVG(SALARY) AS AVERAGE_SALARY
FROM emp_record_table
GROUP BY CONTINENT, COUNTRY;