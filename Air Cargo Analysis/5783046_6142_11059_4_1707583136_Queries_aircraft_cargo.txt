create database Air_Cargro;
show databases;
use air_cargro;
describe customer;

-- 2. Write a query to create route_details table:
CREATE TABLE route_details (
    route_id INT,
    flight_num VARCHAR(10) CHECK (flight_num LIKE 'FL%'),
    origin_airport VARCHAR(50),
    destination_airport VARCHAR(50),
    aircraft_id INT,
    distance_miles DECIMAL(10, 2) CHECK (distance_miles > 0),
    CONSTRAINT pk_route_details PRIMARY KEY (route_id),
    CONSTRAINT unique_flight_num UNIQUE (flight_num)
);

-- 3. Query to display passengers on routes 01 to 25:
SELECT *
FROM passengers_on_flights
WHERE route_id BETWEEN 01 AND 25;

-- 4. Query to identify passengers and revenue in business class:
SELECT COUNT(customer_id) AS num_passengers, SUM(price_per_ticket) AS total_revenue
FROM ticket_details
WHERE class_id = 'Bussiness';

-- 5. Query to display full names of customers:
SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM customer;

-- 6. Query to extract registered and booked customers:
SELECT *
FROM customer
WHERE customer_id IN (SELECT DISTINCT customer_id FROM ticket_details);

-- 7. Query to identify customers flying Emirates in Economy Plus class:
SELECT c.first_name, c.last_name
FROM customer c
JOIN ticket_details t ON c.customer_id = t.customer_id
WHERE t.brand = 'Emirates' AND t.class_id = 'Economy Plus';

-- 8. Query to identify customers flying Economy Plus using Group By and Having:
SELECT customer_id
FROM passengers_on_flights
WHERE class_id = 'Economy Plus'
GROUP BY customer_id
HAVING COUNT(*) > 1;

-- 9. Query to identify if revenue has crossed 10000 using the IF clause:
SELECT IF(SUM(price_per_ticket) > 10000, 'Yes', 'No') AS revenue_crossed_10000
FROM ticket_details;

-- 10. Query to create and grant access to a new user:
CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON database_name.* TO 'new_user'@'localhost';

-- 11. Query to find maximum ticket price for each class using window functions:
SELECT class_id, MAX(price_per_ticket) OVER (PARTITION BY class_id) AS max_ticket_price
FROM ticket_details;

-- 12. Query to extract passengers on route ID 4 with improved performance:
CREATE INDEX idx_route_id ON passengers_on_flights (route_id);
SELECT *
FROM passengers_on_flights
WHERE route_id = 4;

-- 13. Query to view execution plan for route ID 4:
EXPLAIN SELECT *
FROM passengers_on_flights
WHERE route_id = 4;

-- 14. Query to calculate total price of tickets booked by customer across different aircraft IDs using rollup function:
SELECT customer_id, aircraft_id, SUM(price_per_ticket) AS total_price
FROM ticket_details
GROUP BY customer_id, aircraft_id WITH ROLLUP;

-- 15. Query to create a view for business class customers with airline brand:
CREATE VIEW Business_Class_Customers AS
SELECT c.first_name, c.last_name, t.brand
FROM customer c
JOIN ticket_details t ON c.customer_id = t.customer_id
WHERE t.class_id = 'Business';

-- 16. Query to create stored procedure for passengers between a range of routes:
DELIMITER //
CREATE PROCEDURE GetPassengersByRouteRange(IN min_route_id INT, IN max_route_id INT)
BEGIN
    IF NOT EXISTS (SELECT * FROM information_schema.tables WHERE table_name = 'passengers_on_flights') THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Table does not exist';
    ELSE
        SELECT *
        FROM passengers_on_flights
        WHERE route_id BETWEEN min_route_id AND max_route_id;
    END IF;
END //
DELIMITER ;

-- 17. Query to create stored procedure for routes with distance > 2000 miles:
DELIMITER //
CREATE PROCEDURE GetLongDistanceRoutes()
BEGIN
    SELECT *
    FROM routes
    WHERE Distance_miles > 2000;
END //
DELIMITER ;

-- 18. Query to create stored procedure for grouping flight distance into categories:
DELIMITER //
CREATE PROCEDURE GroupFlightDistanceCategories()
BEGIN
    SELECT 
        CASE
            WHEN Distance_miles <= 2000 THEN 'Short Distance Travel (SDT)'
            WHEN Distance_miles > 2000 AND Distance_miles <= 6500 THEN 'Intermediate Distance Travel (IDT)'
            ELSE 'Long Distance Travel (LDT)'
        END AS distance_category,
        COUNT(*) AS num_flights
    FROM routes
    GROUP BY distance_category;
END //
DELIMITER ;

-- 19. Query to extract ticket purchase details with complimentary service indication using stored function:
DELIMITER //
CREATE FUNCTION GetTicketDetailsWithComplimentaryService(class_id VARCHAR(20))
RETURNS VARCHAR(3)
BEGIN
    DECLARE complimentary VARCHAR(3);
    IF class_id IN ('Business', 'Economy Plus') THEN
        SET complimentary = 'Yes';
    ELSE
        SET complimentary = 'No';
    END IF;
    RETURN complimentary;
END //
DELIMITER ;

-- 20. Query to extract first record of customer whose last name ends with Scott using a cursor:
DELIMITER //
CREATE PROCEDURE GetCustomerByLastName(IN last_name_suffix VARCHAR(20))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE customer_id_val INT;
    DECLARE first_name_val VARCHAR(50);
    DECLARE last_name_val VARCHAR(50);
    DECLARE date_of_birth_val DATE;
    DECLARE gender_val CHAR(1);

    DECLARE cur_customer CURSOR FOR
        SELECT customer_id, first_name, last_name, date_of_birth, gender
        FROM customer
        WHERE last_name LIKE CONCAT('%', last_name_suffix);
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur_customer;
    read_loop: LOOP
        FETCH cur_customer INTO customer_id_val, first_name_val, last_name_val, date_of_birth_val, gender_val;
        IF done THEN
            LEAVE read_loop;
        END IF;
        -- Process the first record here
        SELECT customer_id_val, first_name_val, last_name_val, date_of_birth_val, gender_val;
    END LOOP;

    CLOSE cur_customer;
END //
DELIMITER ;
